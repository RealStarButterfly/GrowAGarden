-- === CONFIG ===
local TAB_NAME = "AutoBuy"
local BUTTON_TEXT_ON = "Auto Buy: ON"
local BUTTON_TEXT_OFF = "Auto Buy: OFF"

-- === Ensure _G values are set by main UI ===
if not (_G.SlapperSidebar and _G.SlapperContent) then
    warn("[Slapper ButtonLoader] Required UI references (_G.SlapperSidebar or _G.SlapperContent) are missing.")
    return
end

-- === STATE ===
local toggled = false

-- === Utility: Smart tab-specific container creation ===
_G.SlapperTabContent = _G.SlapperTabContent or {}

local function getOrCreateContentForTab(tabName)
    if _G.SlapperTabContent[tabName] then
        return _G.SlapperTabContent[tabName]
    end

    local container = Instance.new("Frame")
    container.Name = tabName .. "_Container"
    container.Size = UDim2.new(1, -40, 1, -60)
    container.Position = UDim2.new(0, 20, 0, 50)
    container.BackgroundTransparency = 1
    container.Visible = false
    container.Parent = _G.SlapperContent

    local layout = Instance.new("UIListLayout")
    layout.Padding = UDim.new(0, 8)
    layout.SortOrder = Enum.SortOrder.LayoutOrder
    layout.Parent = container

    _G.SlapperTabContent[tabName] = container
    return container
end

-- === Override Tab Button Behavior ===
for _, button in pairs(_G.SlapperSidebar:GetChildren()) do
    if button:IsA("TextButton") and button.Name == TAB_NAME then
        button.MouseButton1Click:Connect(function()
            -- Hide everything else
            for _, v in pairs(_G.SlapperTabContent) do
                v.Visible = false
            end

            -- Hide info/settings panels
            if _G.SlapperContent:FindFirstChild("InfoLabel") then
                _G.SlapperContent.InfoLabel.Visible = false
            end
            if _G.SlapperContent:FindFirstChild("SettingsPanel") then
                _G.SlapperContent.SettingsPanel.Visible = false
            end

            -- Show this tab
            local targetContainer = getOrCreateContentForTab(TAB_NAME)
            targetContainer.Visible = true
        end)
    end
end

-- === Add Toggle Button ===
local toggleButton = Instance.new("TextButton")
toggleButton.Name = "AutoBuyToggle"
toggleButton.Size = UDim2.new(0, 160, 0, 36)
toggleButton.Text = BUTTON_TEXT_OFF
toggleButton.Font = Enum.Font.GothamBold
toggleButton.TextSize = 14
toggleButton.TextColor3 = Color3.fromRGB(255, 255, 255)
toggleButton.BackgroundColor3 = Color3.fromRGB(60, 60, 65)
toggleButton.BorderSizePixel = 0
toggleButton.AutoButtonColor = false
Instance.new("UICorner", toggleButton).CornerRadius = UDim.new(0, 8)

toggleButton.MouseButton1Click:Connect(function()
    toggled = not toggled
    toggleButton.Text = toggled and BUTTON_TEXT_ON or BUTTON_TEXT_OFF
    toggleButton.BackgroundColor3 = toggled and Color3.fromRGB(40, 130, 90) or Color3.fromRGB(60, 60, 65)

    -- Add your toggle logic here
    if toggled then
        print("[Auto Buy] Enabled")
        -- Start auto-buy logic
    else
        print("[Auto Buy] Disabled")
        -- Stop auto-buy logic
    end
end)

-- === Attach to the correct tab's container ===
local container = getOrCreateContentForTab(TAB_NAME)
toggleButton.Parent = container
